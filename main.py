from models import Obra, Usuario, Emprestimo
from core import Acervo
from datetime import datetime
from repositorio import salvar_obra, salvar_usuario, salvar_emprestimo, deletar_obra, deletar_user, deletar_emprestimos
from rich.console import Console

console = Console()
acervo = Acervo()
usuarios = {}
emprestimos_ativos = []

def menu_principal():
    """
    Exibe o menu principal do sistema, permitindo escolher entre as √°reas
    do administrador, do usu√°rio, ou sair do sistema.
    """
    while True:
        print("\n===== MENU PRINCIPAL =====")
        print("[1] √Årea do Administrador")
        print("[2] √Årea do Usu√°rio")
        print("[0] Sair")
        opcao = input("Escolha: ")

        if opcao == '1':
            menu_admin()
        elif opcao == '2':
            menu_usuario()
        elif opcao == '0':
            print("Encerrando o sistema...")
            break
        else:
            print("Op√ß√£o inv√°lida! Tente novamente.")

def menu_admin():
    """
    √Årea do administrador: gerencia obras, usu√°rios, empr√©stimos e relat√≥rios.
    Op√ß√µes dispon√≠veis:
    1 - Cadastrar nova obra
    2 - Remover obra
    3 - Cadastrar novo usu√°rio
    4 - Remover usu√°rio
    5 - Remover todos empr√©stimos de uma obra
    6 - Ver relat√≥rio do invent√°rio
    7 - Ver relat√≥rio de d√©bitos
    0 - Voltar ao menu principal
    """
    while True:
        print("\n--- √ÅREA DO ADMINISTRADOR ---")
        print("[1] Cadastrar nova obra")
        print("[2] Remover obra")
        print("[3] Cadastrar novo usu√°rio")
        print("[4] Remover usu√°rio")
        print("[5] Remover empr√©stimos de uma obra")
        print("[6] Ver relat√≥rio do invent√°rio")
        print("[7] Ver relat√≥rio de d√©bitos")
        print("[0] Voltar")
        opcao = input("Escolha: ")

        if opcao == '1':
            titulo = input("T√≠tulo: ")
            autor = input("Autor: ")
            try:
                ano = int(input("Ano: "))
                quantidade = int(input("Quantidade: "))
            except ValueError:
                print("Ano e quantidade devem ser n√∫meros inteiros.")
                continue
            categoria = input("Categoria: ")
            obra = Obra(titulo, autor, ano, categoria, quantidade)
            acervo += obra
            salvar_obra(obra)
            print(f"Obra '{titulo}' cadastrada com sucesso!")
        elif opcao == '2':
            titulo = input("T√≠tulo da obra a remover: ")
            obra = acervo.obras.get(titulo)
            if obra:
                acervo -= obra
                deletar_obra(obra.id)
                print(f"Obra '{titulo}' removida com sucesso.")
            else:
                print("Obra n√£o encontrada.")
        elif opcao == '3':
            nome = input("Nome: ")
            email = input("Email: ")
            usuario = Usuario(nome, email)
            usuarios[usuario.id] = usuario
            salvar_usuario(usuario)
            print(f"Usu√°rio '{nome}' cadastrado com sucesso!")
        elif opcao == '4':
            nome = input("Nome do usu√°rio a remover: ")
            for u_id, u in list(usuarios.items()):
                if u.nome.lower() == nome.lower():
                    deletar_user(u.id)
                    del usuarios[u_id]
                    print(f"Usu√°rio '{nome}' removido com sucesso.")
                    break
            else:
                print("Usu√°rio n√£o encontrado.")
        elif opcao == '5':
            titulo = input("T√≠tulo da obra para remover empr√©stimos: ")
            obra = acervo.obras.get(titulo)
            if obra:
                deletar_emprestimos(obra.id)
                print(f"Empr√©stimos da obra '{titulo}' removidos.")
            else:
                print("Obra n√£o encontrada.")
        elif opcao == '6':
            tabela = acervo.relatorio_inventario()
            console.print(tabela)
        elif opcao == '7':
            tabela = acervo.relatorio_debitos()
            console.print(tabela)
        elif opcao == '0':
            break
        else:
            print("Op√ß√£o inv√°lida! Tente novamente.")

def menu_usuario():
    """
    √Årea do usu√°rio: permite realizar empr√©stimos, devolu√ß√µes,
    renova√ß√µes e consulta do hist√≥rico de empr√©stimos.
    Op√ß√µes dispon√≠veis:
    1 - Realizar empr√©stimo
    2 - Devolver obra
    3 - Renovar empr√©stimo
    4 - Ver hist√≥rico de empr√©stimos
    0 - Voltar ao menu principal
    """
    while True:
        print("\n--- √ÅREA DO USU√ÅRIO ---")
        print("[1] Realizar empr√©stimo")
        print("[2] Devolver obra")
        print("[3] Renovar empr√©stimo")
        print("[4] Ver hist√≥rico de empr√©stimos")
        print("[0] Voltar")
        opcao = input("Escolha: ")

        if opcao == '1':
            nome = input("Nome do usu√°rio: ")
            usuario = encontrar_usuario_por_nome(nome)
            if not usuario:
                print("Usu√°rio n√£o encontrado.")
                continue
            titulo = input("T√≠tulo da obra: ")
            obra = acervo.obras.get(titulo)
            if not obra:
                print("Obra n√£o encontrada.")
                continue
            try:
                dias = int(input("Quantos dias de empr√©stimo? "))
            except ValueError:
                print("Digite um n√∫mero v√°lido para os dias.")
                continue
            try:
                emprestimo = acervo.emprestar(obra, usuario, dias)
                salvar_emprestimo(emprestimo)
                emprestimos_ativos.append(emprestimo)
                print("Empr√©stimo realizado com sucesso!")
            except ValueError as e:
                print(f"Erro: {e}")
        elif opcao == '2':
            nome = input("Nome do usu√°rio: ")
            usuario = encontrar_usuario_por_nome(nome)
            if not usuario:
                print("Usu√°rio n√£o encontrado.")
                continue
            emprestimos = [e for e in emprestimos_ativos if e.usuario == usuario and not e.data_devolucao]
            if not emprestimos:
                print("Nenhum empr√©stimo em aberto para este usu√°rio.")
                continue
            for i, e in enumerate(emprestimos):
                print(f"[{i}] {e}")
            try:
                i = int(input("Escolha o √≠ndice do empr√©stimo a devolver: "))
                if i < 0 or i >= len(emprestimos):
                    print("√çndice inv√°lido.")
                    continue
            except ValueError:
                print("Digite um √≠ndice v√°lido.")
                continue
            data_devol = input("Data da devolu√ß√£o (DD/MM/AAAA): ")
            try:
                data_devol = datetime.strptime(data_devol, "%d/%m/%Y").date()
            except ValueError:
                print("Formato de data inv√°lido.")
                continue
            acervo.devolver(emprestimos[i], data_devol)
            print("Devolu√ß√£o registrada com sucesso!")
        elif opcao == '3':
            nome = input("Nome do usu√°rio: ")
            usuario = encontrar_usuario_por_nome(nome)
            if not usuario:
                print("Usu√°rio n√£o encontrado.")
                continue
            emprestimos = [e for e in emprestimos_ativos if e.usuario == usuario and not e.data_devolucao]
            if not emprestimos:
                print("Nenhum empr√©stimo em aberto para este usu√°rio.")
                continue
            for i, e in enumerate(emprestimos):
                print(f"[{i}] {e}")
            try:
                i = int(input("Escolha o √≠ndice do empr√©stimo a renovar: "))
                if i < 0 or i >= len(emprestimos):
                    print("√çndice inv√°lido.")
                    continue
            except ValueError:
                print("Digite um √≠ndice v√°lido.")
                continue
            try:
                dias = int(input("Dias extras para renova√ß√£o: "))
            except ValueError:
                print("Digite um n√∫mero v√°lido para os dias.")
                continue
            try:
                acervo.renovar(emprestimos[i], dias)
                print("Empr√©stimo renovado com sucesso!")
            except ValueError as e:
                print(f"Erro: {e}")
        elif opcao == '4':
            nome = input("Nome do usu√°rio: ")
            usuario = encontrar_usuario_por_nome(nome)
            if usuario:
                tabela = acervo.historico_usuario(usuario)
                console.print(tabela)
            else:
                print("Usu√°rio n√£o encontrado.")
        elif opcao == '0':
            break
        else:
            print("Op√ß√£o inv√°lida! Tente novamente.")

def encontrar_usuario_por_nome(nome):
    """
    Busca um usu√°rio pelo nome, ignorando mai√∫sculas/min√∫sculas.

    Args:
        nome (str): Nome do usu√°rio a buscar.

    Returns:
        Usuario | None: Usu√°rio encontrado ou None se n√£o existir.
    """
    for u in usuarios.values():
        if u.nome.lower() == nome.lower():
            return u
    return None

if __name__ == "__main__":
    print("Bem-vindo ao Sistema de Acervo Bibliogr√°fico üìö")
    menu_principal()